datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  password           String
  name               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  folders            Folder[]
  chats              Chat[]
  refinedFiles       RefinedFile[]
  PasswordResetToken PasswordResetToken[]
  files              File[]
  chatLogs           ChatLog[]

  @@index([email])
}

model Folder {
  id           String        @id @default(uuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  files        File[]
  isStarred    Boolean?      @default(false)
  tags         Tag[]         @relation("FolderToTag")
  refinedFiles RefinedFile[]

  @@unique([name, userId])
  @@index([userId])
}

model RefinedFile {
  id        String   @id @default(uuid())
  original  String
  refined   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  fileId    String   @unique
  file      File     @relation(fields: [fileId], references: [id])

  @@index([folderId, userId, fileId])
  @@index([userId, fileId])
}

model Tag {
  id      String   @id @default(uuid())
  name    String   @unique
  files   File[]   @relation("FileToTag")
  folders Folder[] @relation("FolderToTag")
}

model Chat {
  id           String        @id @default(uuid())
  title        String
  content      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  chatMessages ChatMessage[]
  fileId       String?       @unique
  file         File?         @relation(fields: [fileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([fileId]) // Added index for fileId
}

model File {
  id          String       @id @default(uuid())
  name        String
  type        String
  s3Path      String // The S3 path or URL where the file is stored
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  folderId    String?
  folder      Folder?      @relation(fields: [folderId], references: [id])
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  refinedFile RefinedFile?
  chat        Chat?
  tags        Tag[]        @relation("FileToTag")

  @@index([userId])
  @@index([folderId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@index([chatId])
}

model ChatLog {
  id        String   @id @default(uuid())
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

enum FileType {
  PDF
  IMAGE_JPEG
  IMAGE_PNG
  TEXT
  HEIC
  HEIF
}
