datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  password           String
  name               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  folders            Folder[]
  chats              Chat[]
  refinedNotes       RefinedNote[]
  PasswordResetToken PasswordResetToken[]
  files              File[]
}

model Tag {
  id      String   @id @default(uuid())
  name    String   @unique
  folders Folder[] @relation("FolderToTag")
  notes   Note[]   @relation("NoteToTag")
}

model Folder {
  id           String        @id @default(uuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  notes        Note[]
  isStarred    Boolean?      @default(false)
  tags         Tag[]         @relation("FolderToTag")
  refinedNotes RefinedNote[]
  File         File[]

  @@unique([name, userId])
  @@index([userId])
}

model Note {
  id          String        @id @default(uuid())
  name        String
  content     String?
  isRefined   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  folderId    String
  folder      Folder        @relation(fields: [folderId], references: [id])
  files       File[]
  isStarred   Boolean?      @default(false)
  viewCount   Int?          @default(0)
  dueDate     DateTime?
  tags        Tag[]         @relation("NoteToTag")
  RefinedNote RefinedNote[]

  @@index([folderId])
}

model File {
  id        String   @id @default(uuid())
  name      String
  type      String
  content   Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  noteId    String?
  note      Note?    @relation(fields: [noteId], references: [id])
  folderId  String?
  folder    Folder?  @relation(fields: [folderId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId]) // <- Add this line to create an index on userId
  @@index([noteId])
  @@index([folderId])
}

model RefinedNote {
  id        String   @id @default(uuid())
  original  String
  refined   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id])

  @@index([folderId, userId, noteId])
  @@index([userId, noteId])
  @@index([noteId])
}

model Chat {
  id           String        @id @default(uuid())
  title        String
  content      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  chatMessages ChatMessage[]

  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@index([chatId])
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

enum FileType {
  PDF
  IMAGE_JPEG
  IMAGE_PNG
  TEXT
  // Add other types as needed
}
